name: Flask CI/CD Pipeline
# Check asfdasf test
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_DB: mydb
      PORT: 5002

    steps:
      # Stage 1: Clean workspace
      - name: Clean Workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf flaskDBgender

      # Stage 2: Checkout Repository
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      # Stage 3: Clone Additional Repository (if needed)
      - name: Clone Dependency Repository
        run: |
          echo "Cloning external repository..."
          git clone https://github.com/sagitab/flaskDBgender.git
          cd flaskDBgender

      # Stage 5: Build Docker Image
      - name: Build Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Building Docker image..."
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker build -t ${IMAGE_NAME} .

      # Stage 8: Push Docker Image to Registry
      - name: Push Docker Image to Registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Pushing Docker image to registry..."
          docker tag ${IMAGE_NAME} ${DOCKER_USERNAME}/${IMAGE_NAME}
          docker push ${IMAGE_NAME}

      - name: Install Dependencies
        run: |
            sudo yum install -y make docker golang 
        
      - name: Clone and Build Docker Hub Tool
        run: |
            git clone https://github.com/docker/hub-tool.git
            cd hub-tool
            make
            mkdir -p $HOME/.local/bin  # Create a local bin directory
            mv bin/hub-tool $HOME/.local/bin/hub-tool  # Move to a path owned by runner
            echo "$HOME/.local/bin" >> $GITHUB_PATH  # Add to PATH
            hub-tool --version  # Verify installation
        
      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
        run: |
          echo "$DOCKER_PASSWORD" | hub-tool login --username "$DOCKER_USERNAME" --password-stdin

      - name: delete-old-images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
          RUN_NUMBER: ${{ github.run_number }}
        run: |
         
          for i in $(seq 70 80); do 
            hub-tool tag rm -f sagisen/flaskaws:0.0.0.$i
          done
         

      # - name: delete-old-images
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
      #     RUN_NUMBER: ${{ github.run_number }}
      #   run: |
      #     LAST_DEL=$((RUN_NUMBER - 10))
      #     FIRST_DEL=$((RUN_NUMBER - 20))

      #     if ((RUN_NUMBER % 10 == 0)); then
      #       for i in $(seq $FIRST_DEL $LAST_DEL); do 
      #         hub-tool tag rm -f sagisen/flaskaws:0.0.0.$i
      #       done
      #     fi



      # - name: Test
      #   run: |
      #     cat > .env << "ENV"  # Double quotes for expansion
      #     MYSQL_HOST=mysql
      #     MYSQL_USER=root
      #     MYSQL_PASSWORD=${{ secrets.SQL_PASS }}
      #     MYSQL_DB=mydb
      #     PORT=5002
      #     ENV
      #     GITHUB_RUN_NUMBER=${{ github.run_number }}
      #     PREV_BUILD=47
      #     sed -i "s/flaskaws:0.0.0\.$PREV_BUILD/flaskaws:0.0.0.$GITHUB_RUN_NUMBER/" docker-compose.yml  # Double quotes for expansion

      #     ls
      #     docker images
      #     docker compose up -d  # Ensure Docker Compose V2 is used
      #     sleep 1
      #     docker compose ps
      #     sleep 30
      #     i=0
      #     max_attempts=5
          
      #     while [ $i -lt $max_attempts ]; do
      #       echo "Attempt $((i + 1)) of $max_attempts..."
      #       if curl -sSf http://localhost:5002 > /dev/null; then
      #         echo "Flask app is reachable."
      #         exit 0
      #       else
      #         echo "Flask app is not reachable. Retrying in 5 seconds..."
      #         sleep 5
      #         i=$((i + 1))
      #       fi
      #     done

      #     echo "Flask app failed to respond after $max_attempts attempts."
      #     exit 1

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_KEY }}

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=$GOOGLE_GHA_CREDS_PATH
          gcloud auth list
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          GOOGLE_GHA_CREDS_PATH: ${{ steps.auth.outputs.credentials_file_path }}


           # Install Google Cloud SDK
      - name: Install Google Cloud SDK
        run: |
          echo "Installing Google Cloud SDK..."
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          gke-gcloud-auth-plugin --version

      

      # - name: permisions
      #   run: |
      #     gcloud projects add-iam-policy-binding tactile-visitor-449316-h6 \
      #     --member="serviceAccount:github-actions@tactile-visitor-449316-h6.iam.gserviceaccount.com" \
      #     --role="roles/owner"


      # # Stage 4: Configure AWS Credentials
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
      #     aws-region: us-east-1  # Replace with your AWS region if different
      - name: check user
        run: |
          gcloud auth list
      # #apply to the user premisions
      # - name: Grant IAM service account user role to GitHub Actions
      #   run: |
      #     gcloud iam service-accounts add-iam-policy-binding 970480484828-compute@developer.gserviceaccount.com \
      #       --member="serviceAccount:github-actions@tactile-visitor-449316-h6.iam.gserviceaccount.com" \
      #       --role="roles/iam.serviceAccountUser" \
      #       --project="tactile-visitor-449316-h6"

      # - name: Grant container admin role to GitHub Actions
      #   run: |
      #     gcloud projects add-iam-policy-binding tactile-visitor-449316-h6 \
      #       --member="serviceAccount:github-actions@tactile-visitor-449316-h6.iam.gserviceaccount.com" \
      #       --role="roles/container.admin"

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.10.4  # Specify your desired Terraform version

      # - name: Cache Terraform providers
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.terraform.d/plugin-cache
      #     key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
      #     restore-keys: |
      #       ${{ runner.os }}-terraform-

      # - name: Terraform Init
      #   run: terraform init

      # - name: Terraform Plan
      #   run: terraform plan
      #   env:
      #     TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
      #     TF_VAR_build_number: ${{ github.run_number }}

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve
      #   env:
      #     TF_VAR_mysql_password: ${{ secrets.SQL_PASS }}  # Pass MySQL password securely using GitHub secrets
      #     TF_VAR_build_number: ${{ github.run_number }}
      
      # - name: Set up kubectl
      #   run: |
      #     GITHUB_RUN_NUMBER=${{ github.run_number }}
      #     PREV_BUILD=45
      #     sed -i "s/flaskaws:0.0.0\.$PREV_BUILD/flaskaws:0.0.0.$GITHUB_RUN_NUMBER/" k8s.yaml  # Double quotes for expansion
          
      #     # Retry mechanism for getting GKE credentials
      #     MAX_RETRIES=5
      #     RETRY_COUNT=0

      #     while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
      #       echo "Attempt $((RETRY_COUNT+1)) to get GKE credentials..."
            
      #       if gcloud container clusters get-credentials gke-cluster --region us-east1; then
      #         echo "‚úÖ Successfully got GKE credentials."
      #         break
      #       else
      #         echo "‚ùå Failed to get GKE credentials. Retrying in 10 seconds..."
      #         RETRY_COUNT=$((RETRY_COUNT+1))
      #         sleep 10
      #       fi
      #     done

      #     # If we exhausted all retries, fail the pipeline
      #     if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
      #       echo "üö® ERROR: Reached max retries ($MAX_RETRIES). Failing pipeline."
      #       exit 1
      #     fi

      #     kubectl get nodes  # Verify connection

      # - name: Deploy to GKE
      #   run: kubectl apply -f k8s.yaml  # Apply the Kubernetes configuration (k8s.yaml)
          
      # - name: Launch EC2 Instance
      #   id: launch_ec2
      #   run: |
      #     USER_DATA=$(cat <<-'EOF'
      #     #!/bin/bash
      #     set -e
      #     yum update -y
      #     amazon-linux-extras enable docker
      #     yum install -y docker
      #     systemctl start docker
      #     systemctl enable docker
      #     usermod -aG docker ec2-user
      #     curl -L "https://github.com/docker/compose/releases/download/v2.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #     chmod +x /usr/local/bin/docker-compose
      #     ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      #     mkdir -p /home/ec2-user/flaskBDgender/db-scripts
      #     cd /home/ec2-user/flaskBDgender

      #     # Write docker-compose.yml
      #     cat > docker-compose.yml <<'COMPOSE'
      #     version: '3.8'
      #     services:
      #       flask-app:
      #         image: sagisen/flaskaws:0.0.0.25
      #         container_name: flask_app
      #         ports:
      #           - ${PORT:-5002}:${PORT:-5002}
      #         environment:
      #           FLASK_APP: main.py
      #           FLASK_ENV: development
      #           MYSQL_HOST: ${MYSQL_HOST}
      #           MYSQL_USER: ${MYSQL_USER}
      #           MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      #           MYSQL_DB: ${MYSQL_DB}
      #           PORT: ${PORT:-5002}
      #         depends_on:
      #           mysql:
      #             condition: service_healthy
      #         networks:
      #           - app-network

      #       mysql:
      #         image: mysql:8.0
      #         container_name: mysql
      #         environment:
      #           MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      #           MYSQL_DATABASE: ${MYSQL_DB}
      #         ports:
      #           - "3307:3306"
      #         volumes:
      #           - mysql-data:/var/lib/mysql
      #           - ./db-scripts:/docker-entrypoint-initdb.d
      #         networks:
      #           - app-network
      #         healthcheck:
      #           test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      #           interval: 10s
      #           timeout: 5s
      #           retries: 3

      #     volumes:
      #       mysql-data:

      #     networks:
      #       app-network:
      #         driver: bridge
      #     COMPOSE

      #     # Write .env
      #     cat > .env <<'ENV'
      #     MYSQL_HOST=mysql
      #     MYSQL_USER=root
      #     MYSQL_PASSWORD=${{ secrets.SQL_PASS }}
      #     MYSQL_DB=mydb
      #     PORT=5002
      #     ENV

      #     # Write init.sql
      #     cat > db-scripts/init.sql <<'SQL'
      #     CREATE DATABASE IF NOT EXISTS mydb;

      #     USE mydb;

      #     CREATE TABLE IF NOT EXISTS `imges` (
      #       `idimges` INT NOT NULL AUTO_INCREMENT,
      #       `url` VARCHAR(500) NULL,
      #       `name` VARCHAR(45) NULL,
      #       PRIMARY KEY (`idimges`)
      #     );

      #     CREATE TABLE IF NOT EXISTS `count` (
      #       `idcounter` INT NOT NULL AUTO_INCREMENT,
      #       `counter` INT NOT NULL,
      #       PRIMARY KEY (`idcounter`)
      #     );

      #     INSERT INTO `count` (`counter`) VALUES (0);

      #     INSERT INTO `imges` (url, name) 
      #     VALUES 
      #       ("https://www.chipublib.org/wp-content/uploads/sites/3/2022/09/36079964425_7b3042d5e1_k.jpg", "eminem"),
      #       ("https://i.scdn.co/image/ab6761610000e5eba00b11c129b27a88fc72f36b", "eminem"),
      #       ("https://ih1.redbubble.net/image.3270018746.5019/flat,750x,075,f-pad,750x1000,f8f8f8.jpg", "eminem"),
      #       ("https://www.aestheticwalldecor.com/cdn/shop/files/eminem-rap-rolling-stone-magazine-wall-art-poster-aesthetic-wall-decor.jpg?v=1692556007", "eminem");
      #     SQL
      #     cd /home/ec2-user/flaskBDgender/
      #     docker-compose down
      #     docker-compose up -d
      #     EOF
      #     )

      #     INSTANCE_ID=$(aws ec2 run-instances \
      #       --image-id ami-0c02fb55956c7d316 \
      #       --count 1 \
      #       --instance-type t2.micro \
      #       --key-name auto_key \
      #       --security-group-ids sg-033cc57f4bddfbd55 \
      #       --user-data "$USER_DATA" \
      #       --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlaskApp}]' \
      #       --query 'Instances[0].InstanceId' \
      #       --output text)
      #     echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV


      # - name: Wait for EC2 to Start
      #   run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      # - name: Get EC2 Public IP
      #   id: get_public_ip
      #   run: |
      #     PUBLIC_IP=$(aws ec2 describe-instances \
      #       --instance-ids ${{ env.INSTANCE_ID }} \
      #       --query 'Reservations[0].Instances[0].PublicIpAddress' \
      #       --output text)
      #     echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      # - name: Output Application URL
      #   run: echo "Your Flask app is running at http://${{ env.PUBLIC_IP }}"


              # # Stage 7: Run Deployment Script
      # - name: Run Deployment Script
      #   env:
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      #     MYSQL_HOST: mysql
      #     MYSQL_USER: root
      #     MYSQL_PASSWORD: ${{ secrets.SQL_PASS }}
      #     MYSQL_DB: mydb
      #     PORT: 5002
      #     SSH_KEY_PATH: ${{ secrets.KEY_PATH }}
      #   run: python deploy.py
