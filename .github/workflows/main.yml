name: Flask CI/CD Pipeline
#chexk
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_DB: mydb
      PORT: 5002

    steps:
      # Stage 1: Clean workspace
      - name: Clean Workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf flaskDBgender

      # Stage 2: Checkout Repository
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      # Stage 3: Clone Additional Repository (if needed)
      - name: Clone Dependency Repository
        run: |
          echo "Cloning external repository..."
          git clone https://github.com/sagitab/flaskDBgender.git
          cd flaskDBgender

      # Stage 4: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1  # Replace with your AWS region if different

      # Stage 5: Build Docker Image
      - name: Build Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Building Docker image..."
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker build -t ${IMAGE_NAME} .

      # Stage 6: Install Python Dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Stage 8: Push Docker Image to Registry
      - name: Push Docker Image to Registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Pushing Docker image to registry..."
          docker tag ${IMAGE_NAME} ${DOCKER_USERNAME}/${IMAGE_NAME}
          docker push ${IMAGE_NAME}
          
      - name: Launch EC2 Instance
        id: launch_ec2
        run: |
          USER_DATA=$(cat <<-'EOF'
          #!/bin/bash
          set -e
          yum update -y
          amazon-linux-extras enable docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/v2.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          mkdir -p /home/ec2-user/flaskBDgender/db-scripts
          cd /home/ec2-user/flaskBDgender

          # Write docker-compose.yml
          cat > docker-compose.yml <<'COMPOSE'
          version: '3.8'
          services:
            flask-app:
              image: sagisen/flaskaws:0.0.0.25
              container_name: flask_app
              ports:
                - ${PORT:-5002}:${PORT:-5002}
              environment:
                FLASK_APP: main.py
                FLASK_ENV: development
                MYSQL_HOST: ${MYSQL_HOST}
                MYSQL_USER: ${MYSQL_USER}
                MYSQL_PASSWORD: ${MYSQL_PASSWORD}
                MYSQL_DB: ${MYSQL_DB}
                PORT: ${PORT:-5002}
              depends_on:
                mysql:
                  condition: service_healthy
              networks:
                - app-network

            mysql:
              image: mysql:8.0
              container_name: mysql
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
                MYSQL_DATABASE: ${MYSQL_DB}
              ports:
                - "3307:3306"
              volumes:
                - mysql-data:/var/lib/mysql
                - ./db-scripts:/docker-entrypoint-initdb.d
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                interval: 10s
                timeout: 5s
                retries: 3

          volumes:
            mysql-data:

          networks:
            app-network:
              driver: bridge
          COMPOSE

          # Write .env
          cat > .env <<'ENV'
          MYSQL_HOST=mysql
          MYSQL_USER=root
          MYSQL_PASSWORD=${{ secrets.SQL_PASS }}
          MYSQL_DB=mydb
          PORT=5002
          ENV

          # Write init.sql
          cat > db-scripts/init.sql <<'SQL'
          CREATE DATABASE IF NOT EXISTS mydb;

          USE mydb;

          CREATE TABLE IF NOT EXISTS `imges` (
            `idimges` INT NOT NULL AUTO_INCREMENT,
            `url` VARCHAR(500) NULL,
            `name` VARCHAR(45) NULL,
            PRIMARY KEY (`idimges`)
          );

          CREATE TABLE IF NOT EXISTS `count` (
            `idcounter` INT NOT NULL AUTO_INCREMENT,
            `counter` INT NOT NULL,
            PRIMARY KEY (`idcounter`)
          );

          INSERT INTO `count` (`counter`) VALUES (0);

          INSERT INTO `imges` (url, name) 
          VALUES 
            ("https://www.chipublib.org/wp-content/uploads/sites/3/2022/09/36079964425_7b3042d5e1_k.jpg", "eminem"),
            ("https://i.scdn.co/image/ab6761610000e5eba00b11c129b27a88fc72f36b", "eminem"),
            ("https://ih1.redbubble.net/image.3270018746.5019/flat,750x,075,f-pad,750x1000,f8f8f8.jpg", "eminem"),
            ("https://www.aestheticwalldecor.com/cdn/shop/files/eminem-rap-rolling-stone-magazine-wall-art-poster-aesthetic-wall-decor.jpg?v=1692556007", "eminem");
          SQL
          cd /home/ec2-user/flaskBDgender/
          docker-compose down
          docker-compose up -d
          EOF
          )

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c02fb55956c7d316 \
            --count 1 \
            --instance-type t2.micro \
            --key-name auto_key \
            --security-group-ids sg-033cc57f4bddfbd55 \
            --user-data "$USER_DATA" \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlaskApp}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV


      - name: Wait for EC2 to Start
        run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Public IP
        id: get_public_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      - name: Output Application URL
        run: echo "Your Flask app is running at http://${{ env.PUBLIC_IP }}"


              # # Stage 7: Run Deployment Script
      # - name: Run Deployment Script
      #   env:
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      #     MYSQL_HOST: mysql
      #     MYSQL_USER: root
      #     MYSQL_PASSWORD: ${{ secrets.SQL_PASS }}
      #     MYSQL_DB: mydb
      #     PORT: 5002
      #     SSH_KEY_PATH: ${{ secrets.KEY_PATH }}
      #   run: python deploy.py
