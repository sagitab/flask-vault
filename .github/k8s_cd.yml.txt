name: Flask CI/CD Pipeline
# Check asfdasf test
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_DB: mydb
      PORT: 5002

    steps:
      # Stage 1: Clean workspace
      - name: Clean Workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf flaskDBgender

      # Stage 2: Checkout Repository
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      # Stage 3: Clone Additional Repository (if needed)
      - name: Clone Dependency Repository
        run: |
          echo "Cloning external repository..."
          git clone https://github.com/sagitab/flaskDBgender.git
          cd flaskDBgender

      # Stage 5: Build Docker Image
      - name: Build Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Building Docker image..."
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker build -t ${IMAGE_NAME} .

      # Stage 8: Push Docker Image to Registry
      - name: Push Docker Image to Registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
          IMAGE_NAME: "sagisen/flaskaws:0.0.0.${{ github.run_number }}"
        run: |
          echo "Pushing Docker image to registry..."
          docker tag ${IMAGE_NAME} ${DOCKER_USERNAME}/${IMAGE_NAME}
          docker push ${IMAGE_NAME}
        
      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_DELETE }}
        run: |
          echo "$DOCKER_PASSWORD" | hub-tool login --username "$DOCKER_USERNAME" --password-stdin
     - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_KEY }}

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=$GOOGLE_GHA_CREDS_PATH
          gcloud auth list
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          GOOGLE_GHA_CREDS_PATH: ${{ steps.auth.outputs.credentials_file_path }}


           # Install Google Cloud SDK
      - name: Install Google Cloud SDK
        run: |
          echo "Installing Google Cloud SDK..."
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          gke-gcloud-auth-plugin --version
   - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.4  # Specify your desired Terraform version

      - name: Cache Terraform providers
        uses: actions/cache@v2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
          TF_VAR_build_number: ${{ github.run_number }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_mysql_password: ${{ secrets.SQL_PASS }}  # Pass MySQL password securely using GitHub secrets
          TF_VAR_build_number: ${{ github.run_number }}
      
      - name: Set up kubectl
        run: |
          GITHUB_RUN_NUMBER=${{ github.run_number }}
          PREV_BUILD=45
          sed -i "s/flaskaws:0.0.0\.$PREV_BUILD/flaskaws:0.0.0.$GITHUB_RUN_NUMBER/" k8s.yaml  # Double quotes for expansion
          
          # Retry mechanism for getting GKE credentials
          MAX_RETRIES=5
          RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            echo "Attempt $((RETRY_COUNT+1)) to get GKE credentials..."
            
            if gcloud container clusters get-credentials gke-cluster --region us-east1; then
              echo "‚úÖ Successfully got GKE credentials."
              break
            else
              echo "‚ùå Failed to get GKE credentials. Retrying in 10 seconds..."
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 10
            fi
          done

          # If we exhausted all retries, fail the pipeline
          if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
            echo "üö® ERROR: Reached max retries ($MAX_RETRIES). Failing pipeline."
            exit 1
          fi

          kubectl get nodes  # Verify connection

      - name: Deploy to GKE
        run: kubectl apply -f k8s.yaml  # Apply the Kubernetes configuration (k8s.yaml)
       