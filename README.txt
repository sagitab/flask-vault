DevOps Project
This project involves a Flask-based web application that is containerized with Docker. The application is deployed in Google Kubernetes Engine (GKE), with automated CI/CD pipelines managed using GitHub Actions. The pipeline handles building and pushing the Docker image, testing, and managing image lifecycle. The application is monitored using Prometheus for data collection, Loki for log aggregation, and Grafana for real-time data visualization. Sensitive data and credentials are securely handled using GitHub Secrets.

Key Features:
Flask Web Application: The application is built using the Flask framework and exposed as a web service. It is containerized using Docker to ensure portability across environments.

CI/CD Pipeline: The project includes a CI/CD pipeline managed with GitHub Actions. The CI pipeline builds the Docker image, pushes it to Docker Hub, and ensures the image is up to date. The CD pipeline provisions a GKE cluster using Terraform and deploys the application to Kubernetes with Helm.

Docker Image Lifecycle: The pipeline manages the lifecycle of the Docker image by removing outdated versions to ensure the container registry stays clean and optimized.

Testing: A testing phase is included in the CI pipeline, ensuring that the application functions as expected before being deployed to production.

GKE and Kubernetes: The application is deployed to a Google Kubernetes Engine (GKE) cluster. Helm charts are used to simplify the Kubernetes deployment and management process.

Monitoring & Logging:

Prometheus: Used for collecting application metrics, such as request count and response times.
Loki: Aggregates logs from the application, allowing for efficient searching and troubleshooting.
Grafana: Visualizes data from Prometheus and Loki, providing real-time dashboards to monitor application performance and logs.
Security: Sensitive data and credentials, such as database passwords and API keys, are securely managed using GitHub Secrets and ignore files to prevent them from being exposed in version control.

Technologies Used
Flask: A lightweight web framework used to build the web application.
Docker: Containerizes the application to ensure it runs consistently across different environments.
GitHub Actions: Automates the CI/CD pipeline for building, testing, and deploying the application.
Terraform: Provisions the infrastructure, including the GKE cluster, on Google Cloud Platform.
Google Kubernetes Engine (GKE): Runs the application in a managed Kubernetes cluster.
Helm: Manages Kubernetes applications and simplifies deployment.
Prometheus: Collects metrics from the application for monitoring.
Loki: Aggregates logs from the application for efficient querying and troubleshooting.
Grafana: Visualizes data from Prometheus and Loki in real-time dashboards.
Workflow Overview
This project follows a modern CI/CD approach with the following stages:

Continuous Integration (CI):

The application’s Docker image is built and pushed to Docker Hub.
The image lifecycle is managed by removing outdated versions.
A testing phase is included to ensure that the application works as expected before deployment.
Continuous Deployment (CD):

Terraform provisions the infrastructure in Google Cloud Platform, including the GKE cluster.
Helm is used to deploy the Flask application to the Kubernetes cluster.
Monitoring and Logging:

Prometheus is used to collect key metrics, such as request rates and response times.
Loki aggregates the logs generated by the application.
Grafana is used to visualize the metrics and logs, providing real-time insights into the application’s health and performance.
Security:

GitHub Secrets are used to securely manage sensitive credentials, ensuring that sensitive data is not exposed in the workflow or version control.
Ignore files prevent sensitive files from being included in version control, maintaining security.